source('nn_evaluate_jordan_ema.R')
source('nn_train_jordan_ema.R')
jordannet
jordannet$IterativeFitError
source('nn_train_jordan_ema.R')
jordannet$IterativeFitError
jordannet$IterativeFitError
source('nn_train_jordan_ema.R')
jordannet$IterativeFitError
jordannet
jordannet$fitted.values
jordannet$fittedTestValues
patterns$targetsTrain
?jordan
patterns$inputsTest
patterns$targetsTest
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
jordannet$IterativeFitError
source('nn_train_jordan_ema.R')
jordannet$IterativeFitError
jordannet$fittedTestValues
patterns$targetsTest
patterns$inputsTest
patterns$targetsTest
jordannet$fittedTestValues
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
jordannet$IterativeFitError
jordannet$fittedTestValues
patterns$targetsTest
patterns$targetsTest
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
jordannet$IterativeFitError
?normalizeData
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
output
data_out
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
inputs$rsi
source('nn_train_jordan_ema.R')
inputs$rsi
inputs
rsi
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
source('nn_train_jordan_ema.R')
?order
(ii <- order(x <- c(1,1,3:1,1:4,3), y <- c(9,9:1), z <- c(2,1:9)))#
## 6  5  2  1  7  4 10  8  3  9#
rbind(x, y, z)[,ii] # shows the reordering (ties via 2nd & 3rd arg)
timestamp
timestamps
input@timestamp
input@timestamps
input$timestamps
inputs$timestamp
historicalSet
head(historicalSet)
historicalSet$timestamp
order(historicalSet$timestamp)
order(historicalSet$timestamp)
?order
(ii <- order(x <- c(1,1,3:1,1:4,3), y <- c(9,9:1), z <- c(2,1:9)))#
## 6  5  2  1  7  4 10  8  3  9#
rbind(x, y, z)[,ii] # shows the reordering (ties via 2nd & 3rd arg)
c(9,9:1)
c(2,1:9)
c(1,1,3:1,1:4,3)
order (c(1,1,3:1,1:4,3))
historicalSet[order(historicalSet$timestamp)]
historicalSet[order(historicalSet$timestamp),]
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
jordannet$IterativeFitError
source('nn_train_jordan_ema.R')
source('nn_train_jordan_ema.R')
jordannet$IterativeFitError
jordannet$fittedTestValues
source('nn_evaluate_jordan_ema.R')
source('nn_evaluate_jordan_ema.R')
jordannet$fittedTestValues
jordannet$fittedTestValues
source('nn_evaluate_jordan_ema.R')
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
jordannet$IterativeFitError
source('nn_train_jordan_ema.R')
jordannet$IterativeFitError
jordannet$fittedTestValues
jordannet$fittedTestValues
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
data_in
inputs
normalizeData(inputs)
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
source('nn_train_jordan_ema.R')
jordannet$fittedTestValues
data_in
subset(inputs, select = c(ema,close))
??normalizeData
jordannet$fittedTestValues
denormalizeData(jordannet$fittedTestValues, getNormParameters(jordannet$fittedTestValues))
denormalizeData(x=jordannet$fittedTestValues, getNormParameters(data_in))
jordannet
jordannet$fitted.values
jordannet$fitted.values
jordannet
jordannet$archParams
inputs$ema[nrow(inputs$ema)]
inputs$ema
inputs$ema[nrow(inputs)]
historical <- getURL(paste0('http://localhost:8080/gemfire-api/v1/queries/adhoc?q=SELECT%20DISTINCT%20*%20FROM%20/Stocks%20s%20ORDER%20BY%20%22timestamp%22%20desc%20LIMIT%200'))#
#
  historicalSet <- fromJSON(historical)#
  historicalSet <-historicalSet[order(historicalSet$timestamp),]#
#
  dataset <- subset(historicalSet, select = c("DaysHigh", "DaysLow", "LastTradePriceOnly"))#
  names(dataset) <- c("High","Low","Close")
historicalSet$timestamp
historical <- getURL(paste0('http://localhost:8080/gemfire-api/v1/queries/adhoc?q=SELECT%20DISTINCT%20*%20FROM%20/Stocks%20s%20ORDER%20BY%20%22timestamp%22%20desc%20LIMIT%200'))#
#
  historicalSet <- fromJSON(historical)
historicalSet
historical
getURL(paste0('http://localhost:8080/gemfire-api/v1/queries/adhoc?q=SELECT%20DISTINCT%20*%20FROM%20/Stocks%20s%20ORDER%20BY%20%22timestamp%22%20desc%20LIMIT%200'))
paste0('http://localhost:8080/gemfire-api/v1/queries/adhoc?q=SELECT%20DISTINCT%20*%20FROM%20/Stocks%20s%20ORDER%20BY%20%22timestamp%22%20desc%20LIMIT%200')
??train
historical <- getURL(paste0('http://localhost:8080/gemfire-api/v1/queries/adhoc?q=SELECT%20DISTINCT%20*%20FROM%20/Stocks%20s%20ORDER%20BY%20%22timestamp%22%20desc%20LIMIT%20100'))#
#
  historicalSet <- fromJSON(historical)#
  historicalSet <- historicalSet[order(historicalSet$timestamp),]#
#
  dataset <- subset(historicalSet, select = c("DaysHigh", "DaysLow", "LastTradePriceOnly"))#
  names(dataset) <- c("High","Low","Close")#
#
  #Add new row to the end of historical dataset for computing technical indicators.#
  temprow <- matrix(c(rep.int(NA,length(dataset))),nrow=1,ncol=length(dataset))#
  newrow <- data.frame(temprow)#
  colnames(newrow) <- colnames(dataset)#
  dataset <- rbind(dataset,newrow)#
  dataset[nrow(dataset),] <- c(as.numeric(streamRow$DaysHigh), as.numeric(streamRow$DaysLow), as.numeric(streamRow$LastTradePriceOnly))
historical <- getURL(paste0('http://localhost:8080/gemfire-api/v1/queries/adhoc?q=SELECT%20DISTINCT%20*%20FROM%20/Stocks%20s%20ORDER%20BY%20%22timestamp%22%20desc%20LIMIT%20100'))#
#
  historicalSet <- fromJSON(historical)#
  historicalSet <- historicalSet[order(historicalSet$timestamp),]#
#
  dataset <- subset(historicalSet, select = c("DaysHigh", "DaysLow", "LastTradePriceOnly"))#
  names(dataset) <- c("High","Low","Close")
ema <- EMA(dataset$Close) # lag = n-1 (default=9)#
  ema_diff <- dataset$Close - ema # lag = above#
  rsi <- RSI(dataset$Close) # lag = n (default=14)#
  smi <- SMI(HLC(dataset))     # lag = nSlow+nSig (default=34)#
  sar <- SAR(HLC(dataset))     # lag = 0#
#
  high_diff = dataset$High-dataset$Close#
  low_diff = dataset$Close-dataset$Low#
#
  inputs <- data.frame(dataset$Close, ema, ema_diff, rsi, smi, sar, high_diff, low_diff)#
  names(inputs) <- c("close", "ema", "ema_diff", "rsi", "smi","sar", "high_diff", "low_diff")#
#
  #remove extra NAs due to technical indicator lags#
  inputs <- inputs[-1:-35,]#
  dataset <- dataset[-1:-35,]
normalized <- normalizeData(subset(inputs, select = c(close, ema, rsi)))#
  to_predict <- normalized[nrow(normalized),] # we'll predict based on the last value#
  load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')#
  results <- predict(jordannet, to_predict) # should be an input without response column
inputs
historical <- getURL(paste0('http://localhost:8080/gemfire-api/v1/queries/adhoc?q=SELECT%20DISTINCT%20*%20FROM%20/Stocks%20s%20ORDER%20BY%20%22timestamp%22%20desc%20LIMIT%20100'))#
#
  historicalSet <- fromJSON(historical)#
  historicalSet <- historicalSet[order(historicalSet$timestamp),]#
#
  dataset <- subset(historicalSet, select = c("DaysHigh", "DaysLow", "LastTradePriceOnly"))#
  names(dataset) <- c("High","Low","Close")
dataset
ema <- EMA(dataset$Close) # lag = n-1 (default=9)#
  ema_diff <- dataset$Close - ema # lag = above#
  rsi <- RSI(dataset$Close) # lag = n (default=14)#
  smi <- SMI(HLC(dataset))     # lag = nSlow+nSig (default=34)#
  sar <- SAR(HLC(dataset))     # lag = 0
rsi
