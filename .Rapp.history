load(file="mynet.RData")
mynet.results <- compute(mynet, to_predict) # should be an input without response column
mynet <-neuralnet(peakvalley ~ high_diff + low_diff + ema_diff + rsi + sar, trainset, hidden = 6, lifesign = "full", threshold = 0.02)
save(mynet, file="mynet.RData")
load(file="mynet.RData")
mynet <-neuralnet(peakvalley ~ high_diff + low_diff + ema_diff + rsi + sar, trainset, hidden = 6, lifesign = "full", threshold = 0.02)
save(mynet, file="mynet.RData")
mynet <-neuralnet(peakvalley ~ high_diff + low_diff + ema_diff + rsi + sar, trainset, hidden = 6, lifesign = "full", threshold = 0.02)
mynet <-neuralnet(peakvalley ~ high_diff + low_diff + ema_diff + rsi + sar, trainset, hidden = 60, lifesign = "full", threshold = 0.02)
mynet.results <- compute(mynet, to_predict) # should be an input without response column
mynet <-neuralnet(peakvalley ~ high_diff + low_diff + ema_diff + rsi + sar, trainset, hidden = 60, lifesign = "full", threshold = 0.02)
mynet <-neuralnet(peakvalley ~ high_diff + low_diff + ema_diff + rsi + sar, trainset, hidden = 5, lifesign = "full", threshold = 0.02, stepmax=20000)
mynet.results <- compute(mynet, to_predict) # should be an input without response column
install.package("rsnns")
install.packages("rsnns")
2
install.packages("RSNNS")
library("RSNNS")
trainset
trainset_jordan <- subset(trainset, select = -c(peakvalley))
trainset_jordan
jordannet <- jordan(x=trainset,y=trainset$peakvalley, maxit=20000)
predict(jordannet, to_predict)
jordannet <- jordan(x=trainset_jordan,y=trainset$peakvalley, maxit=20000)
predict(jordannet, to_predict)
ema <- EMA(dataset$Close) # lag = n-1 (default=9)#
  ema_diff <- dataset$Close - ema # lag = above#
  rsi <- RSI(dataset$Close) # lag = n (default=14)#
  smi <- SMI(HLC(dataset))     # lag = nSlow+nSig (default=34)#
  sar <- SAR(HLC(dataset))     # lag = 0#
#
  high_diff = dataset$High-dataset$Close#
  low_diff = dataset$Close-dataset$Low
inputs <- data.frame(rsi, ema_diff, high_diff, low_diff, sar)#
  names(inputs) <- c("rsi","ema_diff", "high_diff", "low_diff", "sar")#
#
  #remove extra NAs due to technical indicator lags#
  inputs <- inputs[-1:-15,]#
  dataset <- dataset[-1:-15,]
head(inputs$rsi)
inputs$rsi=normalizeData(inputs$rsi)
head(inputs$rsi)
inputs$ema_diff
inputs$ema_diff=normalizeData(inputs$ema_diff)
??jordan
version
??install.packages()
install.packages(c("RCurl","quantmod","TTR","jsonlite","RSNNS"))
??unlink
?file
?flush
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
to_predict
jordannet
jordannet<-NULL
jordannet
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet
results <- predict(jordannet, to_predict)
results
to_predict
jordannet$InitFuncParams
jordannet$size
jordannet$initFuncParams
jordannet$nInputs
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
results <- predict(jordannet, to_predict)
results
results
results
results <- predict(jordannet, to_predict)
results
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
results <- predict(jordannet, to_predict)
results
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
results <- predict(jordannet, to_predict)
results
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
results <- predict(jordannet, to_predict)
results
results <- predict(jordannet, to_predict)
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
results <- predict(jordannet, to_predict)
results
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
results <- predict(jordannet, to_predict)
results
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
results <- predict(jordannet, to_predict)
results
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
results <- predict(jordannet, to_predict)
results
results
jordannet$IterativeFitError
historical <- getURL(paste0('http://localhost:8080/gemfire-api/v1/queries/adhoc?q=SELECT%20DISTINCT%20*%20FROM%20/Stocks%20s%20ORDER%20BY%20%22timestamp%22%20desc%20LIMIT%20100000'))#
#
  historicalJSon <- fromJSON(historical)#
#
  historicalSet=historicalJSon
head(historical)
head(historicalSet)
historical <- getURL(paste0('http://localhost:8080/gemfire-api/v1/queries/adhoc?q=SELECT%20DISTINCT%20*%20FROM%20/Stocks%20s%20ORDER%20BY%20%22timestamp%22%20LIMIT%20100000'))#
#
  historicalJSon <- fromJSON(historical)#
#
  historicalSet=historicalJSon
head(historicalSet)
dataset <- subset(historicalSet, select = c("DaysHigh", "DaysLow", "LastTradePriceOnly"))#
  names(dataset) <- c("High","Low","Close")
ema <- EMA(dataset$Close) # lag = n-1 (default=9)#
  ema_diff <- dataset$Close - ema # lag = above#
  rsi <- RSI(dataset$Close) # lag = n (default=14)#
  smi <- SMI(HLC(dataset))     # lag = nSlow+nSig (default=34)#
  sar <- SAR(HLC(dataset))     # lag = 0
high_diff = dataset$High-dataset$Close#
  low_diff = dataset$Close-dataset$Low#
  inputs <- data.frame(rsi, ema_diff, high_diff, low_diff, sar)#
  names(inputs) <- c("rsi","ema_diff", "high_diff", "low_diff", "sar")
head(inputs)
#remove extra NAs due to technical indicator lags#
  inputs <- inputs[-1:-15,]#
  dataset <- dataset[-1:-15,]
head(inputs)
# normalize#
  inputs$rsi=normalizeData(inputs$rsi)#
  inputs$ema_diff=normalizeData(inputs$ema_diff)#
  inputs$high_diff=normalizeData(inputs$high_diff)#
  inputs$low_diff=normalizeData(inputs$low_diff)#
  inputs$sar=normalizeData(inputs$sar)
#adds peaks and valleys#
  inputs$peakvalley=0#
  peaks <- findPeaks(dataset$Close, thresh=0.08)#
  valleys <- findValleys(dataset$Close, thresh=0.08)#
  inputs$peakvalley[peaks-1]=-1  #always lagged by 1#
  inputs$peakvalley[valleys-1]=1
trainset <- subset(inputs, select = -c(peakvalley))#
#
  jordannet <- jordan(x=trainset,y=inputs$peakvalley, maxit=3000)
write('Saving network....',stdout());#
#
  f <- file('/Users/fmelo/FinanceStream/mynet_jordan.RData')#
  save(jordannet, file=f);#
  flush(f)#
  close(f)#
#
  write('Done \r\n',stdout())
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
results <- predict(jordannet, to_predict)
results
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
results <- predict(jordannet, to_predict)
results
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
results <- predict(jordannet, to_predict)
results
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
results <- predict(jordannet, to_predict)
results
head(inputs)
inputs
historical <- getURL(paste0('http://localhost:8080/gemfire-api/v1/queries/adhoc?q=SELECT%20DISTINCT%20*%20FROM%20/Stocks%20s%20ORDER%20BY%20%22timestamp%22%20LIMIT%20100000'))#
#
  historicalJSon <- fromJSON(historical)#
#
  historicalSet=historicalJSon#
#
  dataset <- subset(historicalSet, select = c("DaysHigh", "DaysLow", "LastTradePriceOnly"))#
  names(dataset) <- c("High","Low","Close")
ema <- EMA(dataset$Close) # lag = n-1 (default=9)#
  ema_diff <- dataset$Close - ema # lag = above#
  rsi <- RSI(dataset$Close) # lag = n (default=14)#
  smi <- SMI(HLC(dataset))     # lag = nSlow+nSig (default=34)#
  sar <- SAR(HLC(dataset))     # lag = 0#
#
  high_diff = dataset$High-dataset$Close#
  low_diff = dataset$Close-dataset$Low#
  inputs <- data.frame(rsi, ema_diff, high_diff, low_diff, sar)#
  names(inputs) <- c("rsi","ema_diff", "high_diff", "low_diff", "sar")#
#
  #remove extra NAs due to technical indicator lags#
  inputs <- inputs[-1:-15,]#
  dataset <- dataset[-1:-15,]#
#
  # normalize#
  inputs$rsi=normalizeData(inputs$rsi)#
  inputs$ema_diff=normalizeData(inputs$ema_diff)#
  inputs$high_diff=normalizeData(inputs$high_diff)#
  inputs$low_diff=normalizeData(inputs$low_diff)#
  inputs$sar=normalizeData(inputs$sar)
inputs$peakvalley=0#
  peaks <- findPeaks(dataset$Close, thresh=0.08)#
  valleys <- findValleys(dataset$Close, thresh=0.08)#
  inputs$peakvalley[peaks-1]=-1  #always lagged by 1#
  inputs$peakvalley[valleys-1]=1
inputs
dataset
peaks
valleys
findPeaks(dataset$Close, thresh=0.08)
findPeaks(dataset$Close, thresh=0.01)
findPeaks(dataset$Close, thresh=0.02)
findPeaks(dataset$Close, thresh=0.01)
findPeaks(dataset$Close, thresh=0.001)
findPeaks(dataset$Close, thresh=0.0015)
findPeaks(dataset$Close, thresh=0.0018)
findPeaks(dataset$Close, thresh=0.0019)
findPeaks(dataset$Close, thresh=0.002)
findPeaks(dataset$Close, thresh=0.005)
findPeaks(dataset$Close, thresh=0.008)
findPeaks(dataset$Close, thresh=0.006)
findValleys(dataset$Close, thresh=0.006)
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
results <- predict(jordannet, to_predict)
results
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
jordan
?jordan
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
?jordan
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
peaks <- findPeaks(dataset$Close, thresh=0.006)
peaks <- findPeaks(dataset$Close, thresh=0.001)
peaks <- findPeaks(dataset$Close, thresh=0.0001)
peaks <- findPeaks(dataset$Close, thresh=0.0006)
dataset$Close
dataset$Close
peaks <- findPeaks(dataset$Close, thresh=0.1)
peaks <- findPeaks(dataset$Close, thresh=0.01)
peaks <- findPeaks(dataset$Close, thresh=0.001)
peaks <- findPeaks(dataset$Close, thresh=0.0001)
peaks <- findPeaks(dataset$Close, thresh=0.0000000001)
peaks <- findPeaks(dataset$Close, thresh=0.0000000000000001)
findPeaks(dataset$Close, thresh=0.0000000000000001)
findPeaks(dataset$Close, thresh=0.0000001)
findPeaks(dataset$Close, thresh=0.001)
findPeaks(dataset$Close, thresh=0.006)
findPeaks(dataset$Close, thresh=0.008)
findPeaks(dataset$Close, thresh=0.01)
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
findPeaks(dataset$Close, thresh=0.01)
findPeaks(dataset$Close, thresh=0.02)
findPeaks(dataset$Close, thresh=0.015)
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
findPeaks(dataset$Close, thresh=0.02)
findValleys(dataset$Close, thresh=0.02)
findValleys(dataset$Close, thresh=0.025)
findPeaks(dataset$Close, thresh=0.025)
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
historical <- getURL(paste0('http://localhost:8080/gemfire-api/v1/queries/adhoc?q=SELECT%20DISTINCT%20*%20FROM%20/Stocks%20s%20ORDER%20BY%20%22timestamp%22%20LIMIT%20100000'))#
#
  historicalSet <- fromJSON(historical)#
#
  dataset <- subset(historicalSet, select = c("DaysHigh", "DaysLow", "LastTradePriceOnly"))#
  names(dataset) <- c("High","Low","Close")#
#
  # include technical indicators#
  ema <- EMA(dataset$Close) # lag = n-1 (default=9)#
  ema_diff <- dataset$Close - ema # lag = above#
  rsi <- RSI(dataset$Close) # lag = n (default=14)#
  smi <- SMI(HLC(dataset))     # lag = nSlow+nSig (default=34)#
  sar <- SAR(HLC(dataset))     # lag = 0#
#
  high_diff = dataset$High-dataset$Close#
  low_diff = dataset$Close-dataset$Low
inputs <- data.frame(dataset$Close, ema, ema_diff, rsi, smi, sar, high_diff, low_diff)#
  names(inputs) <- c("close", "ema", "ema_diff", "rsi", "smi","sar", "high_diff", "low_diff")#
  #remove extra NAs due to technical indicator lags#
  inputs <- inputs[-1:-35,]#
  dataset <- dataset[-1:-35,]#
#
  # normalize#
  inputs$closeNorm=normalizeData(inputs$close)#
  inputs$ema=normalizeData(inputs$ema)#
  inputs$ema_diff=normalizeData(inputs$ema_diff)#
  inputs$rsi=normalizeData(inputs$rsi)#
  inputs$sar=normalizeData(inputs$sar)#
  inputs$smi=normalizeData(inputs$smi)#
  inputs$high_diff=normalizeData(inputs$high_diff)#
  inputs$low_diff=normalizeData(inputs$low_diff)#
#
  #adds peaks and valleys#
  inputs$peakvalley=0
findPeaks(dataset$Close, thresh=0.02)
findValleys(dataset$Close, thresh=0.02)
findPeaks(dataset$Close, thresh=0.015)
findValleys(dataset$Close, thresh=0.015)
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
findValleys(dataset$Close, thresh=0.0015)
load(file='/Users/fmelo/FinanceStream/mynet_jordan.RData')
jordannet$IterativeFitError
